name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  build:
    name: Build Release Binaries
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            goos: linux
            goarch: amd64
            artifact: sink-linux-amd64
          - os: ubuntu-latest
            goos: linux
            goarch: arm64
            artifact: sink-linux-arm64
          - os: macos-latest
            goos: darwin
            goarch: amd64
            artifact: sink-darwin-amd64
          - os: macos-latest
            goos: darwin
            goarch: arm64
            artifact: sink-darwin-arm64
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.22'

    - name: Get version from tag
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
      run: |
        cd src
        go build -ldflags "-X main.Version=${{ steps.get_version.outputs.VERSION }}" -o ../bin/${{ matrix.artifact }} .

    - name: Generate SHA256 checksum
      run: |
        cd bin
        sha256sum ${{ matrix.artifact }} > ${{ matrix.artifact }}.sha256

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact }}
        path: |
          bin/${{ matrix.artifact }}
          bin/${{ matrix.artifact }}.sha256

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Get version from tag
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: release-artifacts

    - name: Prepare release assets
      run: |
        mkdir -p release
        find release-artifacts -type f -exec cp {} release/ \;
        ls -lh release/

    - name: Extract changelog
      id: changelog
      run: |
        if [ -f CHANGELOG.md ]; then
          VERSION="${{ steps.get_version.outputs.VERSION }}"
          # Extract changelog section for this version
          awk "/## \[?${VERSION#v}\]?/,/## \[?[0-9]/" CHANGELOG.md | grep -v "^## \[?[0-9]" > release-notes.md || echo "See CHANGELOG.md for details" > release-notes.md
        else
          echo "Release ${{ steps.get_version.outputs.VERSION }}" > release-notes.md
        fi

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: release/*
        body_path: release-notes.md
        draft: false
        prerelease: ${{ contains(steps.get_version.outputs.VERSION, '-') }}
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-schema:
    name: Publish Schema to GitHub Pages
    needs: release
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Get version from tag
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

    - name: Setup Pages
      uses: actions/configure-pages@v4
      continue-on-error: true

    - name: Create schema directory structure
      run: |
        mkdir -p pages/schema
        cp src/sink.schema.json pages/schema/sink.schema.json
        cp src/sink.schema.json pages/schema/${{ steps.get_version.outputs.VERSION }}.json
        echo "Schema published for version ${{ steps.get_version.outputs.VERSION }}" > pages/index.html

    - name: Upload Pages artifact
      uses: actions/upload-pages-artifact@v4
      with:
        path: pages
      continue-on-error: true
